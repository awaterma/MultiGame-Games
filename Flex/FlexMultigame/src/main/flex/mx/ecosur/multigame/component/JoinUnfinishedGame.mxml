<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
          title="{resourceManager.getString('Lobby', 'unfinished.panel.title')}" creationComplete="init(event)">

    <mx:Metadata>
        [Event(name="gameChosen", type="mx.ecosur.multigame.event.PlayEvent")]
        [ResourceBundle("Lobby")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        import mx.ecosur.multigame.enum.GameState;
        import mx.formatters.DateFormatter;
        import mx.ecosur.multigame.event.PlayEvent;

        import mx.collections.ArrayCollection;
        import mx.managers.CursorManager;
        import mx.messaging.events.MessageFaultEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import mx.controls.Alert;
        import mx.ecosur.multigame.entity.Registrant;
        import mx.ecosur.multigame.entity.GamePlayer;
        import mx.ecosur.multigame.entity.Agent;
        import mx.ecosur.multigame.entity.Game;

        /* Needed for rendering player information */
        import mx.ecosur.multigame.entity.gente.StrategyPlayer;
        import mx.ecosur.multigame.entity.manantiales.SimpleAgent;

        public var agent:Agent;
        public var player:Registrant;
        private var _games:ArrayCollection;

        public function init(event:Event):void {
            gameService.getUnfinishedGames(player);
        }

        public function addGame(game:Game):Boolean {
            var ret:Boolean = false;

            for (var i:int = 0; i < game.players.length; i++) {
                var t:GamePlayer = GamePlayer(game.players.getItemAt(i));
                if (t.name == player.name) {
                    if (_games == null)
                        _games = new ArrayCollection();
                    _games.addItem(game);
                    updateDataGrid();
                    break;
                }
            }

            return ret;
        }

        public function removeGame(game:Game):Boolean {
            var ret:Boolean = (_games != null);
            if (ret) {
                var idx:int = -1;
                for (var i:int = 0; i < _games.length; i++) {
                    var g:Game = Game(_games.getItemAt(i));
                    if (g.id == game.id) {
                        idx = i;
                    }
                }

                if (idx >= 0) {
                    _games.removeItemAt(idx);
                    updateDataGrid();
                } else
                    ret = false;

            }

            return ret;
        }

        public function updateGame(game:Game):Boolean {
              var ret:Boolean = (_games != null);
              if (ret) {
                var idx:int = -1;
                for (var i:int = 0; i < _games.length; i++) {
                    var g:Game = Game(_games.getItemAt(i));
                    if (g.id == game.id) {
                        idx = i;
                    }
                }

                if (idx >= 0) {
                    _games.removeItemAt(idx);
                    _games.addItemAt(game, idx);
                    updateDataGrid();
                } else
                    ret = false;

              }

            return ret;
        }

        public function reload(event:Event):void {
            var token:AsyncToken = gameService.getUnfinishedGames(player);
            token.resultHandler = resultHandler;
            token.faultHandler = faultHandler;
        }

        private function resultHandler(event:ResultEvent):void {
            if (gamesDataGrid != null && gamesDataGrid.selectedItem == null) {
                _games = ArrayCollection(event.result);
                updateDataGrid();
            }
        }

        private function messageFaultHandler (event:MessageFaultEvent):void {
            CursorManager.removeBusyCursor();
            Alert.show("Error [" + event.faultString + "]");
        }

        private function faultHandler(event:FaultEvent):void {
            CursorManager.removeBusyCursor();
            Alert.show(event.fault.faultString,
                    "Error [" + event.fault.faultString + "]");
        }

        private function updateDataGrid():void {
            var game:Game;
            var gamePlayer:GamePlayer;
            var dataProvider:ArrayCollection = new ArrayCollection();
            var dataItem:Object;
            var df:DateFormatter = new DateFormatter();
            df.formatString = "DD/MM/YYYY H:NN";
            for (var i:Number = 0; i < _games.length; i++) {
                game = Game(_games.getItemAt(i));
                dataItem = new Object();
                dataItem.created = df.format(game.created);
                dataItem.gameType = game.type;
                dataItem.players = "";
                for (var j:Number = 0; game.players != null && j < game.players.length; j++) {
                    if (game.players[j] is GamePlayer) {
                        gamePlayer = GamePlayer(game.players[j]);
                        dataItem.players += gamePlayer.name + " (" + gamePlayer.color + "), ";
                    } else if (game.players[j] is SimpleAgent) {
                        var agent:SimpleAgent = SimpleAgent(game.players[j]);
                        dataItem.players += agent.name + "(" + agent.color + "). ";
                    }
                }
                if (dataItem.players.length > 2) {
                    dataItem.players = dataItem.players.substring(0, dataItem.players.length - 2);
                }
                dataItem.status = GameState.getDescription(game.state);
                dataProvider.addItem(dataItem);
            }
            if (gamesDataGrid)
                gamesDataGrid.dataProvider = dataProvider;
        }

        private function joinGame():void {
            CursorManager.setBusyCursor();
            var idx:int = gamesDataGrid.selectedIndex;
            if (idx < 0) idx = 0;
            var joinedGame:Game = Game(_games.getItemAt(idx));
            var gamePlayer:GamePlayer;
            for (var i:Number = 0; i < joinedGame.players.length; i++) {
                var gp:GamePlayer = joinedGame.players [ i ];
                if (gp.name == this.player.name) {
                    gamePlayer = gp;
                    break;
                }
            }
            if (gamePlayer != null)
                dispatchEvent(new PlayEvent("gameChosen", joinedGame, gamePlayer));
        }

        ]]>
    </mx:Script>
    
    <mx:RemoteObject id="gameService" destination="gameService" result="resultHandler(event)" fault="faultHandler(event)" />

    <mx:VBox width="100%">
        <mx:DataGrid id="gamesDataGrid" width="100%" rowCount="3" minWidth="700">
            <mx:columns>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column1')}"
                                   dataField="created" width="120"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column2')}"
                                   dataField="gameType" width="80"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column3')}"
                                   dataField="players" wordWrap="true" />
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column4')}"
                                   dataField="status" width="120" wordWrap="true"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:Form width="100%">
            <mx:FormItem horizontalAlign="right" width="100%">
                <mx:Button click="joinGame()" label="{resourceManager.getString('Lobby', 'unfinished.button')}"/>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    
</mx:Panel>
