<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:component="mx.ecosur.multigame.component.*"
    width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">

    <mx:Metadata>
        [Event(name="registered", type="mx.ecosur.multigame.event.PlayEvent")]
        [Event(name="gameChosen", type="mx.ecosur.multigame.event.PlayEvent")]
        [Event(name="gameJoined", type="mx.ecosur.multigame.event.PlayEvent")]
        [Event(name="rowSelected", type="mx.ecosur.multigame.event.PlayEvent")]
        [ResourceBundle("Lobby")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import mx.controls.Alert;
            import mx.ecosur.multigame.entity.Registrant;
            import mx.ecosur.multigame.entity.gente.GenteGame;
            import mx.ecosur.multigame.entity.gente.GentePlayer;
            import mx.ecosur.multigame.entity.gente.StrategyPlayer;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;

        private var _player:Registrant;

        public var timer:Timer;

        // Force compilation of game objects to allow serialization of super classes
        // TODO: Change server side architecture so that lobby does not receive game specific subclasses
        private var genteGame:GenteGame;
        private var gentePlayer:GentePlayer;
        private var strategyPlayer:StrategyPlayer;

        [Bindable]
        public function get player():Registrant {
            return _player;
        }

        public function set player(newPlayer:Registrant):void {
            _player = newPlayer;
            gameList.player = _player;
            pendingList.player = _player;
            init();
        }

        private function init():void { 
            timer = new Timer(500);
            timer.addEventListener(TimerEvent.TIMER, timeout);
            timer.start();
        }

        public function timeout(event:Event):void {
            pendingList.reload(event);
            gameList.reload(event);
        }

        public function reload(event:Event):void {
            gameList.reload(event);
            pendingList.reload(event);
        }

        private function choose(event:Event):void {
            dispatchEvent(event);
        }

        private function resultHandler(event:ResultEvent):void {
            dispatchEvent(new Event("complete"));
        }

        private function faultHandler(event:FaultEvent):void {
            Alert.show(event.fault.faultString, "Error");
        }
          
        ]]>
    </mx:Script>
    <mx:RemoteObject id="gameService" destination="gameService" result="resultHandler(event)" fault="faultHandler(event)" />
    <mx:Panel title="{resourceManager.getString('Lobby', 'lobby.panel.title')}" paddingLeft="5" paddingRight="5" paddingBottom="5">
        <mx:Text paddingLeft="10" paddingRight="10" paddingTop="10" id="introTxt"/>
        <mx:TabNavigator width="800" height="280">
            <component:StartNewGame  player="{this.player}" label="{resourceManager.getString('Lobby', 'lobby.tab.start')}"
                 height="100%" width="100%" registered="dispatchEvent(event)"/>
            <component:JoinUnfinishedGame label="{resourceManager.getString('Lobby', 'lobby.tab.middle')}" id="gameList"
                 height="100%" width="100%"
                gameChosen="choose(event)"/>
            <component:JoinPendingGame label="{resourceManager.getString('Lobby', 'lobby.tab.end')}" id="pendingList"
                 player="{player}" height="100%" width="100%"
                gameJoined="choose(event)"/>
        </mx:TabNavigator>
    </mx:Panel>
</mx:Box>
