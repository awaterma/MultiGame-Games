<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
          title="@Resource(key='pending.panel.title', bundle='StringsBundle')" creationComplete="init(event)">

    <mx:Metadata>
        [Event(name="gameJoined", type="mx.ecosur.multigame.event.PlayEvent")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        import mx.ecosur.multigame.enum.GameState;
        import mx.ecosur.multigame.event.PlayEvent;
        import mx.ecosur.multigame.entity.Registrant;
        import mx.ecosur.multigame.entity.GamePlayer;
        import mx.ecosur.multigame.entity.Game;
        import mx.ecosur.multigame.enum.Color;
        import mx.ecosur.multigame.event.ServiceGameEvent;

        import mx.formatters.DateFormatter;
        import mx.collections.ArrayCollection;
        import mx.managers.CursorManager;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.controls.Alert;

        public var player:Registrant;
        private var _games:ArrayCollection;

        public function init(event:Event):void {
            var token:AsyncToken = gameService.getPendingGames(player);
            token.resultHandler = updateResultHandler;
            token.faultHandler = updateFaultHandler;
        }

        public function reload(event:Event):void {
            var token:AsyncToken = gameService.getPendingGames(player);
            token.resultHandler = updateResultHandler;
            token.faultHandler = updateFaultHandler;
        }

        private function updateResultHandler(event:ResultEvent):void {
            _games = ArrayCollection(event.result);
            updateDataGrid();
        }

        private function updateFaultHandler(event:FaultEvent):void {
            Alert.show(event.fault.faultString, "Error getting pending games!");
        }


        private function joinResultHandler(event:ResultEvent):void {
            var serviceEvent:ServiceGameEvent = ServiceGameEvent(event.result);
            dispatchEvent(new PlayEvent("gameJoined", serviceEvent.game, serviceEvent.player));
        }

        private function joinFaultHandler(event:FaultEvent):void {
            Alert.show(event.fault.faultString, "Error joining pending game!");
        }

        private function updateDataGrid():void {
            if (gamesDataGrid == null)
                return
            var game:Game, selected:Game;
            var gamePlayer:GamePlayer;
            var dataProvider:ArrayCollection = new ArrayCollection();
            var dataItem:Object, selectedItem:Object;
            var df:DateFormatter = new DateFormatter();
            df.formatString = "DD/MM/YYYY H:NN";

            /* Get the currently selected game */
            if (gamesDataGrid.selectedIndex > -1) {
                if (_games.length > gamesDataGrid.selectedIndex)
                    selected = Game(_games.getItemAt(gamesDataGrid.selectedIndex));
            }

            for (var i:Number = 0; i < _games.length; i++) {
                game = Game(_games.getItemAt(i));
                dataItem = new Object();
                dataItem.gameType = game.type;
                dataItem.created = df.format(game.created);
                dataItem.players = "";
                for (var j:Number = 0; j < game.players.length; j++) {
                    gamePlayer = GamePlayer(game.players[j]);
                    dataItem.players += gamePlayer.registrant.name + " (" + gamePlayer.color + "), ";
                }
                if (dataItem.players.length > 2) {
                    dataItem.players = dataItem.players.substring(0, dataItem.players.length - 2);
                }
                dataItem.status = GameState.getDescription(game.state);
                dataProvider.addItem(dataItem);
                if (selected != null && selected.id == game.id && game.state == GameState.WAITING)
                    selectedItem = dataItem;
            }
            gamesDataGrid.dataProvider = dataProvider;
            if (selectedItem != null) {
                gamesDataGrid.selectedItem = selectedItem;
            }
        }

        private function joinPending():void {
            CursorManager.setBusyCursor();
            var game:Game = Game(_games.getItemAt(gamesDataGrid.selectedIndex));
            var pendingToken:AsyncToken = gameService.joinPendingGame(game, player, Color.UNKNOWN);
            pendingToken.resultHandler = joinResultHandler;
            pendingToken.faultHandler = joinFaultHandler;
        }
            
        ]]>
    </mx:Script>
    
    <mx:RemoteObject id="gameService" destination="gameService" 
    	result="event.token.resultHandler(event)" fault="event.token.faultHandler(event)"/>

    <mx:VBox width="100%">
        <mx:DataGrid id="gamesDataGrid" width="100%" rowCount="3" minWidth="700">
            <mx:columns>
                <mx:DataGridColumn headerText="@Resource(key='pending.data.column1', bundle='StringsBundle')"
                                   dataField="created" width="120"/>
                <mx:DataGridColumn headerText="@Resource(key='pending.data.column2', bundle='StringsBundle')"
                                   dataField="gameType" width="80"/>
                <mx:DataGridColumn headerText="@Resource(key='pending.data.column3', bundle='StringsBundle')"
                                   dataField="players" wordWrap="true" />
                <mx:DataGridColumn headerText="@Resource(key='pending.data.column4', bundle='StringsBundle')"
                                   dataField="status" width="120" wordWrap="true"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:Form width="100%">
            <mx:FormItem horizontalAlign="right" width="100%">
                <mx:Button click="joinPending()" label="@Resource(key='pending.button', bundle='StringsBundle')"/>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    
</mx:Panel>
