<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
          title="{resourceManager.getString('Lobby', 'unfinished.panel.title')}" creationComplete="init(event)">

    <mx:Metadata>
        [Event(name="gameChosen", type="mx.ecosur.multigame.event.PlayEvent")]
        [ResourceBundle("Lobby")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        import mx.ecosur.multigame.enum.GameState;
        import mx.formatters.DateFormatter;
        import mx.ecosur.multigame.event.PlayEvent;
        import mx.ecosur.multigame.enum.GameEvent;

        import mx.collections.ArrayCollection;
        import mx.managers.CursorManager;
        import mx.messaging.Producer;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.AsyncMessage;
        import mx.messaging.messages.IMessage;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import mx.controls.Alert;
        import mx.ecosur.multigame.entity.Registrant;
        import mx.ecosur.multigame.entity.GamePlayer;
        import mx.ecosur.multigame.entity.Game;

        public var player:Registrant;
        private var _games:ArrayCollection;

        public function init(event:Event):void {
            gameService.getUnfinishedGames(player);
        }

        public function reload(event:Event):void {
            gameService.getUnfinishedGames(player);
        }

        private function resultHandler(event:ResultEvent):void {
            _games = ArrayCollection(event.result);
            updateDataGrid();
        }

        private function messageFaultHandler (event:MessageFaultEvent):void {
            Alert.show("Error [" + event.faultString + "]");
        }

        private function faultHandler(event:FaultEvent):void {
            Alert.show(event.fault.faultString,
                    "Error [" + event.fault.faultString + "]");
        }

        private function updateDataGrid():void {
            var game:Game;
            var gamePlayer:GamePlayer;
            var dataProvider:ArrayCollection = new ArrayCollection();
            var dataItem:Object;
            var df:DateFormatter = new DateFormatter();
            df.formatString = "DD/MM/YYYY H:NN";
            for (var i:Number = 0; i < _games.length; i++) {
                game = Game(_games.getItemAt(i));
                dataItem = new Object();
                dataItem.gameType = game.type;
                dataItem.created = df.format(game.created);
                dataItem.players = "";
                for (var j:Number = 0; j < game.players.length; j++) {
                    gamePlayer = GamePlayer(game.players[j]);
                    dataItem.players += gamePlayer.registrant.name + " (" + gamePlayer.color + "), ";
                }
                if (dataItem.players.length > 2) {
                    dataItem.players = dataItem.players.substring(0, dataItem.players.length - 2);
                }
                dataItem.status = GameState.getDescription(game.state);
                dataProvider.addItem(dataItem);
            }
            if (gamesDataGrid)
                gamesDataGrid.dataProvider = dataProvider;
        }

        private function joinGame():void {
            CursorManager.setBusyCursor();
            var joinedGame:Game = Game(_games.getItemAt(gamesDataGrid.selectedIndex));
            var gamePlayer:GamePlayer;
            for (var i:Number = 0; i < joinedGame.players.length; i++) {
                var gp:GamePlayer = joinedGame.players [ i ];
                if (gp.registrant.id == this.player.id) {
                    gamePlayer = gp;
                    break;
                }
            }

            sendPlayerChange(joinedGame);
            dispatchEvent(new PlayEvent("gameChosen", joinedGame, gamePlayer));
        }

        private function sendPlayerChange(game:Game):void {
            var message:IMessage = new AsyncMessage();
            message.headers.GAME_ID = game.id;
            message.headers.GAME_EVENT = GameEvent.PLAYER_CHANGE;
            message.body = game;
            _producer.send(message);
        }

        ]]>
    </mx:Script>
    
    <mx:RemoteObject id="gameService" destination="gameService" result="resultHandler(event)" fault="faultHandler(event)" />
    <mx:Producer id="_producer" destination="multigame-destination" fault="messageFaultHandler(event)"/>

    <mx:VBox width="100%">
        <mx:DataGrid id="gamesDataGrid" width="100%" rowCount="3" minWidth="700">
            <mx:columns>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column1')}"
                                   dataField="created" width="120"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column2')}"
                                   dataField="gameType" width="80"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column3')}"
                                   dataField="players" wordWrap="true" />
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'unfinished.data.column4')}"
                                   dataField="status" width="120" wordWrap="true"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:Form width="100%">
            <mx:FormItem horizontalAlign="right" width="100%">
                <mx:Button click="joinGame()" label="{resourceManager.getString('Lobby', 'unfinished.button')}"/>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    
</mx:Panel>
