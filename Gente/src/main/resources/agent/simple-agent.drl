/*
* Copyright (C) 2010 ECOSUR, Andrew Waterman and Max Pimm
*
* Licensed under the Academic Free License v. 3.0.
* http://www.opensource.org/licenses/afl-3.0.php
*/

/*
 * This rule package creates a strategic, "Simple" player.
 *
 * A simple player is a player that seeks to make any possible winning moves
 * available in the game.  The simple strategy is to see if there are any
 * scoring moves for his team avaiable, and if so, to try and take the best
 * possible scoring move from that list.  If no scoring moves are available,
 * the simple agent just chooses the first adjacent move to cells of his color,
 * and if no such cell is found, the next adjacent move to the opposition.
 * 
 * @author awaterma@ecosur.mx
*/

package mx.ecosur.multigame.impl.entity.gente;

import mx.ecosur.multigame.enums.GameState;
import mx.ecosur.multigame.grid.model.GridCell;
import mx.ecosur.multigame.grid.Color;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.TreeSet;

#Yellow must move first, and that move can only be at the center of the board
rule "first-move"
    lock-on-active true
when
    game   : GenteGame (state == GameState.PLAY, $grid : grid)
    player : GenteStrategyAgent (turn == true, color == Color.YELLOW, nextMove==null)
    eval ($grid.isEmpty())
then
    GenteMove centerMove = new GenteMove (player, new GridCell (
        game.getRows() / 2, game.getColumns () / 2, player.getColor()));
    modify (player) { setNextMove (centerMove) }
end


rule "simple-move"
    lock-on-active true
when
    game   : GenteGame (state == GameState.PLAY, $grid : grid)
    player : GenteStrategyAgent (turn == true, nextMove == null)
    eval (!$grid.isEmpty())
then
    HashSet<Color> teamColors = new HashSet<Color> ();
    teamColors.add (player.getColor());
    teamColors.add (player.getPartner().getColor());
    
    TreeSet<GenteMove> scoringMoves = player.determineScoringMoves(game, teamColors);
    GenteMove nextMove = null;
    for (GenteMove move : scoringMoves) {
            nextMove = move;
            break;
    }
    modify (player) { setNextMove (nextMove) }
end

rule "random-move"
    lock-on-active true
    salience -10
when
    game   : GenteGame (state == GameState.PLAY, $grid : grid)
    player : GenteStrategyAgent (turn == true, nextMove == null)
    eval (!$grid.isEmpty())
then
    GenteMove nextMove = null;
    TreeSet<GenteMove> possible = player.determineAvailableMoves(game);
    if (possible.size() == 0)
        possible = player.determineAvailableMoves (game,
            player.oppositionColors());
    Random random = new Random ();
    for (GenteMove move : possible) {
        if (random.nextBoolean()) {
            nextMove = move;
            break;
        }
    }
    if (nextMove == null) {
        for (GenteMove move : possible) {
            nextMove = move;
            break;
         }
    }
    modify (player) { setNextMove (nextMove) }
end
