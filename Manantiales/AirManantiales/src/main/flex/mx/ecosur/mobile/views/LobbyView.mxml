<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        title="Manantiales de La Sierra" creationComplete="init(event)"
        skinClass="mx.ecosur.mobile.skins.BitmapSkin">
    <fx:Metadata >
        [Event(name="gameChosen", type="mx.ecosur.multigame.event.PlayEvent")]
    </fx:Metadata>

    <fx:Declarations>
        <s:RemoteObject id="gameService" destination="gameService"
            channelSet="{FlexGlobals.topLevelApplication.amfChannelSet}"
            result="resultHandler(event)"
            fault="faultHandler(event)" />
        <s:Consumer id="listener" destination="lobby-destination"
            channelSet="{FlexGlobals.topLevelApplication.amfChannelSet}"
            fault="messageFaultHandler(event)"
            message="messageResultHandler(event)"
            selector="NOTIFICATION_EVENT in ('CREATE','JOIN', 'DESTROY')"/>
        <s:ArrayCollection id="manModes">
            <fx:Object label="Competitive" data="COMPETITIVE" />
            <fx:Object label="Basic Puzzle" data="BASIC_PUZZLE" />
            <fx:Object label="Silvopastoral" data="SILVOPASTORAL"/>
            <fx:Object label="Final Puzzle" data="SILVO_PUZZLE"/>
        </s:ArrayCollection>
        <s:ArrayList id="strategies">
            <fx:String>SIMPLE</fx:String>
            <fx:String>SIMPLE</fx:String>
            <fx:String>SIMPLE</fx:String>
        </s:ArrayList>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.ecosur.mobile.component.Alert;
        import mx.ecosur.multigame.dao.GameDAO;
        import mx.ecosur.multigame.enum.Color;
        import mx.ecosur.multigame.enum.GameState;
        import mx.ecosur.multigame.enum.NotificationEvent;
        import mx.ecosur.multigame.manantiales.entity.ManantialesGame;

        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.IMessage;
        import mx.rpc.AsyncToken;

        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import spark.components.NavigatorContent;

        protected var modalities:ArrayCollection = new ArrayCollection();

        private var _games:ArrayCollection = new ArrayCollection();

        private var _modes:ArrayCollection = new ArrayCollection();

        public function alert(msg:String):void {
            var a:Alert = new Alert();
            a.open(this, true);
            a.alertmsg.text = msg;
            var metrics:TextLineMetrics = a.measureText(msg);
            a.x = (this.width - metrics.width) / 2;
            a.y = (this.height - metrics.height) / 3;
        }

        protected function init(event:Event):void {
            /* Stage properties */
            stage.scaleMode = StageScaleMode.NO_SCALE;
            stage.align = StageAlign.TOP_LEFT;

            gameGrid.columnHeaderGroup.enabled = false;
            gameGrid.columnHeaderGroup.visible = false;

            /* Load save and pending games */
            gameService.getUnfinishedGames(FlexGlobals.topLevelApplication.registrant);
            gameService.getPendingGames(FlexGlobals.topLevelApplication.registrant);

            /* subscribe the listener */
            listener.subscribe();

            /* add swipe handler to data grid */
            gameGrid.addEventListener (TransformGestureEvent.GESTURE_SWIPE, swipeGame);
        }

        protected function createGame(event:Event):void {
            GameView.gameId = 0;
            /* Only one type of Manantiales agent, so choice is not displayed in mobile client */
            if (ai.selected) {
                gameService.startNewGameWithAI(FlexGlobals.topLevelApplication.registrant, Color.UNKNOWN, "Manantiales", modeList.selectedItem.data, strategies);
            } else {
                gameService.startNewGame(FlexGlobals.topLevelApplication.registrant, Color.UNKNOWN, "Manantiales", modeList.selectedItem.data);
            }
        }

        protected function resultHandler(event:ResultEvent):void {
            if (event.result == null)
                return;
            var response:Array = Array(event.result);

            for (var i:int = 0; i < response.length; i++) {
                if (response[i] is ArrayCollection) {
                    var games:ArrayCollection = ArrayCollection(response[ i ]);
                    for (var j:int = 0; j < games.length; j++) {
                        var d:GameDAO = GameDAO(games [ j ]);
                        if (d.gameType != "Gente") {
                            _games.addItem(d);
                        }

                    }
                    updateGrid();
                } else if (response [ i ] is GameDAO) {
                    var dao:GameDAO = GameDAO(response [ i ]);
                    var added:Boolean = false;
                    for (var j:int = 0; j < _games.length; j++) {
                        var d:GameDAO = GameDAO(_games [ j ]);
                        if (d.gameId == dao.gameId) {
                            d = dao;
                            added = true;
                            break;
                        }
                    }
                    if (!added)
                        _games.addItem(dao);
                    updateGrid();
                } else {
                    var g:ManantialesGame = ManantialesGame(event.result);
                    GameView.gameId = g.id;
                    navigator.pushView(GameView);
                }
            }
        }

        protected function faultHandler(event:FaultEvent):void {
            trace("Fault! [" + event.fault.message + "]");
        }

        protected function messageFaultHandler(event:MessageFaultEvent):void {
            trace("MessageFault! [" + event.faultString);
        }

        protected function messageResultHandler(event:MessageEvent):void {
            var message:IMessage = IMessage(event.message);
            trace("Message: " + message);
            var dao:GameDAO = GameDAO(message.body);
            switch (message.headers.NOTIFICATION_EVENT) {
                case NotificationEvent.CREATE:
                    trace("Creating DAO: " + dao);
                    if (dao.gameType != "GENTE") {
                        _games.addItem(dao);
                    }
                    break;
                case NotificationEvent.DESTROY:
                    trace("Destroying DAO: " + dao);
                    if (dao.gameType != "GENTE") {
                        var idx:int = findIndex(dao);
                        trace("Index to be removed: " + idx);
                        if (idx > 0)
                            _games.removeItemAt(idx);
                    }
                    break;
                case NotificationEvent.JOIN:
                    trace("Join event for DAO: " + dao);
                    if (dao.gameType != "GENTE") {
                        var idx:int = findIndex(dao);
                        trace("Index to be updated: " + idx);
                        if (idx > 0) {
                            _games.removeItemAt(idx);
                            _games.addItemAt(dao, idx);
                        }
                    }
                    break;
                default:
                    break;
            }

            /* always update the grid for any changes */
            updateGrid();
        }

        protected function joinGame(event:MouseEvent):void {
            var tok:AsyncToken;

            var idx:int = gameGrid.selectedIndex;
            var g:GameDAO = GameDAO(_games.getItemAt(idx));

            if (!containsPlayer(g)) {
                gameService.joinPendingGame(g.gameId, FlexGlobals.topLevelApplication.registrant, Color.UNKNOWN);
            }

            GameView.gameId = g.gameId;
            navigator.pushView(GameView);
        }

        protected function swipeGame(event:TransformGestureEvent):void {


        }

        private function updateGrid():void {
            var dataSource:ArrayCollection = new ArrayCollection();
            for (var i:int = 0; i < _games.length; i++) {
                var dao:GameDAO = GameDAO(_games [ i ]);
                dataSource.addItem(model(dao));
            }

            gameGrid.dataProvider = dataSource;
        }

        private function containsPlayer(dao:GameDAO):Boolean {
            var ret:Boolean = false;
            for (var i:int = 0; i < dao.players.length; i++) {
                if (dao.players[i] == FlexGlobals.topLevelApplication.registrant.name) {
                    ret = true;
                    break;
                }
            }

            return ret;
        }

        private function model(dao:GameDAO):Object {
            var dataItem:Object = new Object();
            dataItem.gameType = dao.gameType;
            dataItem.created = dao.creationDate;
            var p:String = "";
            for (var i:Number = 0; dao.players != null && i < dao.players.length; i++) {
                p += dao.players[i] + ", ";
            }
            p = p.substring(0, p.length - 2);
            dataItem.players = p;
            dataItem.status = GameState.getDescription(dao.status);
            return dataItem;
        }

        private function Logout(event:Event):void {
            FlexGlobals.topLevelApplication.amfChannelSet.logout();
            navigator.popToFirstView();
        }

        override public function createReturnObject():Object {
            return LoginView.remoteServer;
        }

        protected function findIndex(dao:GameDAO):int {
            var idx:int = -1;
            for (var i:int = 0; i < _games.length; i++) {
                var ck:GameDAO = GameDAO(_games [ i ]);
                if (ck.gameId = dao.gameId) {
                    idx = i;
                    break;
                }
            }


            return idx;

        }
        ]]>
    </fx:Script>
    <s:VGroup id="availableGroup" width="100%" >
        <s:Spacer/>
        <s:DataGrid id="gameGrid" width="100%" height="100%" doubleClickEnabled="true" doubleClick="joinGame(event)" skinClass="mx.ecosur.mobile.skins.GridSkin" >
            <s:columns>
                <s:ArrayList>
                    <s:GridColumn dataField="created" headerText="Date"/>
                    <s:GridColumn dataField="players" headerText="Players"/>
                    <s:GridColumn dataField="status" headerText="Status"/>
                </s:ArrayList>
            </s:columns>
        </s:DataGrid>
    </s:VGroup>
    <s:Group id="boxes">
        <s:layout>
            <s:TileLayout/>
        </s:layout>
        <s:HGroup id="starter">
            <s:SpinnerListContainer width="100">
                <s:SpinnerList id="modeList" dataProvider="{manModes}" width="100%"/>
            </s:SpinnerListContainer>
            <s:RadioButton groupName="robots" id="human" label="Humans" selected="true"/>
            <s:RadioButton groupName="robots" id="ai" label="Robots"/>
            <s:Button label="Start Game" id="start" buttonDown="{createGame(event)}"
                      skinClass="spark.skins.mobile.ButtonBarLastButtonSkin" />
        </s:HGroup>
        <s:VGroup id="settings">
            <s:SpinnerListContainer width="100">
            <s:SpinnerList id="language" width="100%">
                <s:dataProvider>
                    <s:ArrayList>
                        <fx:String>English</fx:String>
                        <fx:String>Español</fx:String>
                    </s:ArrayList>
                </s:dataProvider>
            </s:SpinnerList>
            </s:SpinnerListContainer>
            <s:ToggleSwitch id="login" selected="true" skinClass="mx.ecosur.mobile.skins.LogInSwitchSkin"
                slideDuration="200" change="Logout(event)"/>
        </s:VGroup>
    </s:Group>
</s:View>
